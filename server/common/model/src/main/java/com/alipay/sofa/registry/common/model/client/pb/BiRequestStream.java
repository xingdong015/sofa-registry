/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.alipay.sofa.registry.common.model.client.pb; // Generated by the protocol buffer
// compiler.  DO NOT EDIT!
// source: registry_grpc_service.proto

/** Protobuf service {@code BiRequestStream} */
public abstract class BiRequestStream implements com.google.protobuf.Service {
  protected BiRequestStream() {}

  public interface Interface {
    /**
     *
     *
     * <pre>
     * Sends a biStreamRequest
     * </pre>
     *
     * <code>rpc requestBiStream(stream .Payload) returns (stream .Payload);</code>
     */
    public abstract void requestBiStream(
        com.google.protobuf.RpcController controller,
        Payload request,
        com.google.protobuf.RpcCallback<Payload> done);
  }

  public static com.google.protobuf.Service newReflectiveService(final Interface impl) {
    return new BiRequestStream() {
      @Override
      public void requestBiStream(
          com.google.protobuf.RpcController controller,
          Payload request,
          com.google.protobuf.RpcCallback<Payload> done) {
        impl.requestBiStream(controller, request, done);
      }
    };
  }

  public static com.google.protobuf.BlockingService newReflectiveBlockingService(
      final BlockingInterface impl) {
    return new com.google.protobuf.BlockingService() {
      public final com.google.protobuf.Descriptors.ServiceDescriptor getDescriptorForType() {
        return getDescriptor();
      }

      public final com.google.protobuf.Message callBlockingMethod(
          com.google.protobuf.Descriptors.MethodDescriptor method,
          com.google.protobuf.RpcController controller,
          com.google.protobuf.Message request)
          throws com.google.protobuf.ServiceException {
        if (method.getService() != getDescriptor()) {
          throw new IllegalArgumentException(
              "Service.callBlockingMethod() given method descriptor for " + "wrong service type.");
        }
        switch (method.getIndex()) {
          case 0:
            return impl.requestBiStream(controller, (Payload) request);
          default:
            throw new AssertionError("Can't get here.");
        }
      }

      public final com.google.protobuf.Message getRequestPrototype(
          com.google.protobuf.Descriptors.MethodDescriptor method) {
        if (method.getService() != getDescriptor()) {
          throw new IllegalArgumentException(
              "Service.getRequestPrototype() given method " + "descriptor for wrong service type.");
        }
        switch (method.getIndex()) {
          case 0:
            return Payload.getDefaultInstance();
          default:
            throw new AssertionError("Can't get here.");
        }
      }

      public final com.google.protobuf.Message getResponsePrototype(
          com.google.protobuf.Descriptors.MethodDescriptor method) {
        if (method.getService() != getDescriptor()) {
          throw new IllegalArgumentException(
              "Service.getResponsePrototype() given method "
                  + "descriptor for wrong service type.");
        }
        switch (method.getIndex()) {
          case 0:
            return Payload.getDefaultInstance();
          default:
            throw new AssertionError("Can't get here.");
        }
      }
    };
  }

  /**
   *
   *
   * <pre>
   * Sends a biStreamRequest
   * </pre>
   *
   * <code>rpc requestBiStream(stream .Payload) returns (stream .Payload);</code>
   */
  public abstract void requestBiStream(
      com.google.protobuf.RpcController controller,
      Payload request,
      com.google.protobuf.RpcCallback<Payload> done);

  public static final com.google.protobuf.Descriptors.ServiceDescriptor getDescriptor() {
    return RegistryGrpcService.getDescriptor().getServices().get(1);
  }

  public final com.google.protobuf.Descriptors.ServiceDescriptor getDescriptorForType() {
    return getDescriptor();
  }

  public final void callMethod(
      com.google.protobuf.Descriptors.MethodDescriptor method,
      com.google.protobuf.RpcController controller,
      com.google.protobuf.Message request,
      com.google.protobuf.RpcCallback<com.google.protobuf.Message> done) {
    if (method.getService() != getDescriptor()) {
      throw new IllegalArgumentException(
          "Service.callMethod() given method descriptor for wrong " + "service type.");
    }
    switch (method.getIndex()) {
      case 0:
        this.requestBiStream(
            controller,
            (Payload) request,
            com.google.protobuf.RpcUtil.<Payload>specializeCallback(done));
        return;
      default:
        throw new AssertionError("Can't get here.");
    }
  }

  public final com.google.protobuf.Message getRequestPrototype(
      com.google.protobuf.Descriptors.MethodDescriptor method) {
    if (method.getService() != getDescriptor()) {
      throw new IllegalArgumentException(
          "Service.getRequestPrototype() given method " + "descriptor for wrong service type.");
    }
    switch (method.getIndex()) {
      case 0:
        return Payload.getDefaultInstance();
      default:
        throw new AssertionError("Can't get here.");
    }
  }

  public final com.google.protobuf.Message getResponsePrototype(
      com.google.protobuf.Descriptors.MethodDescriptor method) {
    if (method.getService() != getDescriptor()) {
      throw new IllegalArgumentException(
          "Service.getResponsePrototype() given method " + "descriptor for wrong service type.");
    }
    switch (method.getIndex()) {
      case 0:
        return Payload.getDefaultInstance();
      default:
        throw new AssertionError("Can't get here.");
    }
  }

  public static Stub newStub(com.google.protobuf.RpcChannel channel) {
    return new Stub(channel);
  }

  public static final class Stub extends BiRequestStream implements Interface {
    private Stub(com.google.protobuf.RpcChannel channel) {
      this.channel = channel;
    }

    private final com.google.protobuf.RpcChannel channel;

    public com.google.protobuf.RpcChannel getChannel() {
      return channel;
    }

    public void requestBiStream(
        com.google.protobuf.RpcController controller,
        Payload request,
        com.google.protobuf.RpcCallback<Payload> done) {
      channel.callMethod(
          getDescriptor().getMethods().get(0),
          controller,
          request,
          Payload.getDefaultInstance(),
          com.google.protobuf.RpcUtil.generalizeCallback(
              done, Payload.class, Payload.getDefaultInstance()));
    }
  }

  public static BlockingInterface newBlockingStub(com.google.protobuf.BlockingRpcChannel channel) {
    return new BlockingStub(channel);
  }

  public interface BlockingInterface {
    public Payload requestBiStream(com.google.protobuf.RpcController controller, Payload request)
        throws com.google.protobuf.ServiceException;
  }

  private static final class BlockingStub implements BlockingInterface {
    private BlockingStub(com.google.protobuf.BlockingRpcChannel channel) {
      this.channel = channel;
    }

    private final com.google.protobuf.BlockingRpcChannel channel;

    public Payload requestBiStream(com.google.protobuf.RpcController controller, Payload request)
        throws com.google.protobuf.ServiceException {
      return (Payload)
          channel.callBlockingMethod(
              getDescriptor().getMethods().get(0),
              controller,
              request,
              Payload.getDefaultInstance());
    }
  }

  // @@protoc_insertion_point(class_scope:BiRequestStream)
}
